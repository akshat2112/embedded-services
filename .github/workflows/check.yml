# This workflow runs whenever a PR is opened or updated, or a commit is pushed to main. It runs
# several checks:
# - commit_list: produces a list of commits to be checked
# - fmt: checks that the code is formatted according to rustfmt
# - clippy: checks that the code does not contain any clippy warnings
# - doc: checks that the code can be documented without errors
# - hack: check combinations of feature flags
# - msrv: check that the msrv specified in the crate is correct
# - vet: checks for any new or updated unvetted dependencies
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches: [main]
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR. Ensures that
# we don't waste CI time, and returns results quicker https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: check
jobs:

  commit_list:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get commit list (push)
      id: get_commit_list_push
      if: ${{ github.event_name == 'push' }}
      run: |
        echo "id0=$GITHUB_SHA" > $GITHUB_OUTPUT
        echo "List of tested commits:" > $GITHUB_STEP_SUMMARY
        sed -n 's,^id[0-9]\+=\(.*\),- https://github.com/OpenDevicePartnership/embedded-services/commit/\1,p' -- $GITHUB_OUTPUT >> $GITHUB_STEP_SUMMARY

    - name: Get commit list (PR)
      id: get_commit_list_pr
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        git rev-list --reverse refs/remotes/origin/${{ github.base_ref }}..${{ github.event.pull_request.head.sha }} | awk '{ print "id" NR "=" $1 }' > $GITHUB_OUTPUT
        git diff --quiet ${{ github.event.pull_request.head.sha }} ${{ github.sha }} || echo "id0=$GITHUB_SHA" >> $GITHUB_OUTPUT
        echo "List of tested commits:" > $GITHUB_STEP_SUMMARY
        sed -n 's,^id[0-9]\+=\(.*\),- https://github.com/OpenDevicePartnership/embedded-services/commit/\1,p' -- $GITHUB_OUTPUT >> $GITHUB_STEP_SUMMARY

    outputs:
      commits: ${{ toJSON(steps.*.outputs.*) }}

  fmt:
    runs-on: ubuntu-latest
    name: stable / fmt
    needs: commit_list
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: cargo fmt --check
        run: cargo fmt --check

  clippy:
    runs-on: ubuntu-latest
    name: ${{ matrix.toolchain }} / clippy
    needs: commit_list
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        # Get early warning of new lints which are regularly introduced in beta channels.
        toolchain: [stable, beta]
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - name: cargo clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-check'
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # Enable once we have a released crate
  # semver:
  #   runs-on: ubuntu-latest
  #   name: semver
  #   needs: commit_list
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #         ref: ${{ matrix.commit }}
  #     - name: Install stable
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: rustfmt
  #     - name: cargo-semver-checks
  #       uses: obi1kenobi/cargo-semver-checks-action@v2

  doc:
    # run docs generation on nightly rather than stable. This enables features like
    # https://doc.rust-lang.org/beta/unstable-book/language-features/doc-cfg.html which allows an
    # API be documented as only available in some specific platforms.
    runs-on: ubuntu-latest
    name: nightly / doc
    needs: commit_list
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
      - name: cargo doc
        run: |
          cargo doc --no-deps -F log --locked
          cargo doc --no-deps -F defmt --locked
        env:
          RUSTDOCFLAGS: --cfg docsrs

  hack:
    # cargo-hack checks combinations of feature flags to ensure that features are all additive
    # which is required for feature unification
    runs-on: ubuntu-latest
    name: ubuntu / stable / features
    needs: commit_list
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      # intentionally no target specifier; see https://github.com/jonhoo/rust-ci-conf/pull/4
      # --feature-powerset runs for every combination of features
      - name: cargo hack
        run: cargo hack --feature-powerset --mutually-exclusive-features=log,defmt check --locked

  deny:
    # cargo-deny checks licenses, advisories, sources, and bans for
    # our dependencies.
    runs-on: ubuntu-latest
    name: ubuntu / stable / deny
    needs: commit_list
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo install cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          log-level: warn
          command: check
          arguments: --all-features --locked

  test:
    runs-on: ubuntu-latest
    name: ubuntu / stable / test
    needs: commit_list
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo test
        run: cargo test --locked

  msrv:
    # check that we can build using the minimal rust version that is specified by this crate
    runs-on: ubuntu-latest
    needs: commit_list
    # we use a matrix here just because env can't be used in job names
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
        msrv: ["1.85"]
    name: ubuntu / ${{ matrix.msrv }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install ${{ matrix.msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}
      - name: cargo +${{ matrix.msrv }} check
        run: |
          cargo check -F log --locked
          cargo check -F defmt --locked


  check-arm-examples:
    runs-on: ubuntu-latest
    needs: commit_list
    # we use a matrix here just because env can't be used in job names
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
        example_directory: ["examples/rt633", "examples/rt685s-evk"]
    name: ubuntu / check-examples
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo check
        working-directory: ${{ matrix.example_directory }}
        run: |
          cargo check --target thumbv8m.main-none-eabihf

  check-std-examples:
    runs-on: ubuntu-latest
    needs: commit_list
    # we use a matrix here just because env can't be used in job names
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
        example_directory: ["examples/std"]
    name: ubuntu / check-examples
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ matrix.commit }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo check
        working-directory: ${{ matrix.example_directory }}
        run: |
          cargo check --locked
  
  vet:
    # cargo-vet checks for unvetted dependencies in the Cargo.lock file
    # This is to ensure that new dependencies are vetted before they are added to the project
    name: Vet Dependencies
    runs-on: ubuntu-latest
    needs: commit_list
    env:
      CARGO_VET_VERSION: 0.10.1
    
    permissions: 
      pull-requests: write 
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
    
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ${{ runner.tool_cache }}/cargo-vet
        key: cargo-vet-bin-${{ env.CARGO_VET_VERSION }}

    - name: Add the tool cache directory to the search path
      run: echo "${{ runner.tool_cache }}/cargo-vet/bin" >> $GITHUB_PATH

    - name: Ensure that the tool cache is populated with the cargo-vet binary
      run: cargo install --root ${{ runner.tool_cache }}/cargo-vet --version ${{ env.CARGO_VET_VERSION }} cargo-vet

    - name: Invoke cargo-vet
      id: cargo-vet
      run: cargo vet --locked
      continue-on-error: true
    
    - name: Generate PR comment on failure
      # This step will only run if the cargo-vet step fails
      if: ${{ always() && steps.cargo-vet.outcome == 'failure' }}
      uses: thollander/actions-comment-pull-request@v3
      with:
          message: |
            # Dependencies Audit Failed

            `cargo vet` has failed in this PR. Please run `cargo vet --locked` locally to check for new or updated unvetted dependencies.
            Details about the vetting process can be found in [README.md](../blob/main/supply-chain/README.md)
                  
            ## If the unvetted dependencies are not needed
            Please modify Cargo.toml file to avoid including the dependencies.
                  
            ## If the unvetted dependencies are needed
            Post a new comment to the PR with your reasoning to help the auditors vet the dependencies.
            After the auditors have vetted the dependencies, the PR will need to be rebased to pick up the new audits and pass this check.
                  
            ### Copy and paste the questionnaire below and provide your answers:
            
            **1. What crates (with version) need to be audited?**
            
            **2. How many of the crates are version updates vs new dependencies?**
            
            **3. Did you confirm none of the already existing crates serve the same purpose?**
            
            **4. Any extra notes to the auditors to help with their audits.**
          
          comment-tag: cargo-vet
          mode: recreate

    - name: Update PR comment on success
      # This step will only run if the cargo-vet step succeeds after failing at least once
      if: ${{ steps.cargo-vet.outcome == 'success' }}
      uses: thollander/actions-comment-pull-request@v3
      with:
          message: |
            # Dependencies Audit Passed
            `cargo vet` has passed in this PR. No new unvetted dependencies were found.
          comment-tag: cargo-vet
          mode: recreate
          create-if-not-exists: false