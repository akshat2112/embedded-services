# This workflow runs whenever a push or pull request is made to the "main" branch of the repository.
# It runs cargo vet to check for unvetted dependencies in the project.

name: Cargo Vet

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request_target:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:

  commit_list:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get commit list (push)
      id: get_commit_list_push
      if: ${{ github.event_name == 'push' }}
      run: |
        echo "id0=$GITHUB_SHA" > $GITHUB_OUTPUT
        echo "List of tested commits:" > $GITHUB_STEP_SUMMARY
        sed -n 's,^id[0-9]\+=\(.*\),- https://github.com/OpenDevicePartnership/embedded-services/commit/\1,p' -- $GITHUB_OUTPUT >> $GITHUB_STEP_SUMMARY

    - name: Get commit list (PR)
      id: get_commit_list_pr
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        git rev-list --reverse refs/remotes/origin/${{ github.base_ref }}..${{ github.event.pull_request.head.sha }} | awk '{ print "id" NR "=" $1 }' > $GITHUB_OUTPUT
        git diff --quiet ${{ github.event.pull_request.head.sha }} ${{ github.sha }} || echo "id0=$GITHUB_SHA" >> $GITHUB_OUTPUT
        echo "List of tested commits:" > $GITHUB_STEP_SUMMARY
        sed -n 's,^id[0-9]\+=\(.*\),- https://github.com/OpenDevicePartnership/embedded-services/commit/\1,p' -- $GITHUB_OUTPUT >> $GITHUB_STEP_SUMMARY

    outputs:
      commits: ${{ toJSON(steps.*.outputs.*) }}

  vet:
    # cargo-vet checks for unvetted dependencies in the Cargo.lock file
    # This is to ensure that new dependencies are vetted before they are added to the project
    name: Vet Dependencies
    runs-on: ubuntu-latest
    needs: commit_list
    env:
      CARGO_VET_VERSION: 0.10.1
    
    permissions: 
      pull-requests: write 
    strategy:
      fail-fast: false
      matrix:
        commit: ${{ fromJSON(needs.commit_list.outputs.commits) }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        ref: ${{ matrix.commit }}

    - uses: actions/cache@v4
      with:
        path: ${{ runner.tool_cache }}/cargo-vet
        key: cargo-vet-bin-${{ env.CARGO_VET_VERSION }}

    - name: Add the tool cache directory to the search path
      run: echo "${{ runner.tool_cache }}/cargo-vet/bin" >> $GITHUB_PATH

    - name: Ensure that the tool cache is populated with the cargo-vet binary
      run: cargo install --root ${{ runner.tool_cache }}/cargo-vet --version ${{ env.CARGO_VET_VERSION }} cargo-vet

    - name: Invoke cargo-vet
      id: cargo-vet
      run: cargo vet --locked

    - name: Generate PR comment on failure
      # This step will only run if the cargo-vet step fails
      if: ${{ failure() && steps.cargo-vet.outcome == 'failure' }}
      uses: thollander/actions-comment-pull-request@v3
      with:
          message: |
            # Dependencies Audit Failed
            `cargo vet` has failed in this PR. Please run `cargo vet --locked` locally to check for new or updated unvetted dependencies.
            Details about the vetting process can be found in [README.md](../blob/main/supply-chain/README.md)
                  
            ## If the unvetted dependencies are not needed
            Please modify Cargo.toml file to avoid including the dependencies.
                  
            ## If the unvetted dependencies are needed
            Post a new comment to the PR with your reasoning to help the auditors vet the dependencies.
            After the auditors have vetted the dependencies, the PR will need to be rebased to pick up the new audits and pass this check.
                  
            ### Copy and paste the questionnaire below and provide your answers:
            
            **1. What crates (with version) need to be audited?**
            
            **2. How many of the crates are version updates vs new dependencies?**
            
            **3. Did you confirm none of the already existing crates serve the same purpose?**
            
            **4. Any extra notes to the auditors to help with their audits.**
          
          comment-tag: cargo-vet
          mode: recreate

    - name: Update PR comment on success
      # This step will only run if the cargo-vet step succeeds after failing at least once
      if: ${{ steps.cargo-vet.outcome == 'success' }}
      uses: thollander/actions-comment-pull-request@v3
      with:
          message: |
            # Dependencies Audit Passed
            `cargo vet` has passed in this PR. No new unvetted dependencies were found.
          comment-tag: cargo-vet
          mode: recreate
          create-if-not-exists: false
